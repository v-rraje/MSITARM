{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "Cluster",
      "metadata": { "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only" }
    },
    "VMScaleSetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": { "description": "Name of your VM - Between 3 and 13 characters. Letters and numbers only" }
    },
    "localAdminUserName": {
      "type": "string",
      "defaultValue": "",
      "minLength": 1,
      "metadata": {
        "description": "Local Username for the Virtual Machine."
      }
    },
    "localAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "minLength": 1,
      "metadata": {
        "description": "Local Password for the Virtual Machine."
      }
    },
    "domainJoinUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for domain joining"
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "Password for domain joining"
      }
    },
    "localAdmins": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "local admins that can login to the VMs. csv list of domain\\user"
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Organizational Unit the VM will join"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The FQDN of the AD domain"
      }
    },
    "appID": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "",
      "metadata": {
        "description": "appID tag for the Virtual Machine."
      }
    },
    "orgID": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "",
      "metadata": {
        "description": "orgID tag for the Virtual Machine."
      }
    },
    "env": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "environment tag for the Virtual Machine."
      }
    },
    "vmStorageAccountName0": {
      "type": "string",
      "defaultValue": ""
    },
    "vmStorageAccountName1": {
      "type": "string",
      "defaultValue": ""
    },
    "nt0applicationStartPort": {
      "type": "int",
      "defaultValue": 20001
    },
    "nt0applicationEndPort": {
      "type": "int",
      "defaultValue": 21000
    },
    "nt0ephemeralStartPort": {
      "type": "int",
      "defaultValue": 49152
    },
    "nt0ephemeralEndPort": {
      "type": "int",
      "defaultValue": 65534
    },
    "nt0fabricTcpGatewayPort": {
      "type": "int",
      "defaultValue": 19000
    },
    "nt0fabricHttpGatewayPort": {
      "type": "int",
      "defaultValue": 19080
    },
    "nt1applicationStartPort": {
      "type": "int",
      "defaultValue": 21001
    },
    "nt1applicationEndPort": {
      "type": "int",
      "defaultValue": 40000
    },
    "nt1ephemeralStartPort": {
      "type": "int",
      "defaultValue": 49152
    },
    "nt1ephemeralEndPort": {
      "type": "int",
      "defaultValue": 65534
    },
    "nt1fabricTcpGatewayPort": {
      "type": "int",
      "defaultValue": 19001
    },
    "nt1fabricHttpGatewayPort": {
      "type": "int",
      "defaultValue": 19081
    },

    "publicIPAddressName": {
      "type": "string",
      "defaultValue": "PublicIP-VM"
    },
    "publicIPAddressType": {
      "type": "string",
      "allowedValues": [ "Dynamic" ],
      "defaultValue": "Dynamic"
    },
    "vmStorageAccountContainerName": {
      "type": "string",
      "defaultValue": "vhds"
    },
    "virtualNetwork": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "ERNetwork"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "Subnet-1"
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": ""
    },
    "dnsName": {
      "type": "string",
      "defaultValue": "cloudmssfcdev"
    },
    "nicName": {
      "type": "string",
      "defaultValue": "NIC"
    },
    "lbName": {
      "type": "string",
      "defaultValue": "ILB"
    },
    "lbIPName": {
      "type": "string",
      "defaultValue": "PublicIP-LB-FE"
    },
    "overProvision": {
      "type": "string",
      "defaultValue": "false"
    },
    "ImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer"
    },
    "ImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer"
    },
    "Sku": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter"
    },
    "ImageVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "loadBalancedAppPort1": {
      "type": "int",
      "defaultValue": 80,
      "metadata": { "description": "Input endpoint1 for the application to use. Replace it with what your application uses" }
    },
    "loadBalancedAppPort2": {
      "type": "int",
      "defaultValue": 8505,
      "metadata": { "description": "Input endpoint2 for the application to use. Replace it with what your application uses" }
    },
    "loadBalancedAppPort3": {
      "type": "int",
      "defaultValue": 8506,
      "metadata": { "description": "Input endpoint3 for the application to use. Replace it with what your application uses" }
    },
    "storageAccountType0": {
      "type": "string",
      "allowedValues": [ "Standard_LRS", "Standard_GRS", "Premium_LRS" ],
      "defaultValue": "Standard_LRS",
      "metadata": { "description": "Replication option for the VM image storage account" }
    },
    "storageAccountType1": {
      "type": "string",
      "allowedValues": [ "Standard_LRS", "Standard_GRS", "Premium_LRS" ],
      "defaultValue": "Standard_LRS",
      "metadata": { "description": "Replication option for the VM image storage account" }
    },
    "supportLogStorageAccountType": {
      "type": "string",
      "allowedValues": [ "Standard_LRS", "Standard_GRS" ],
      "defaultValue": "Standard_LRS",
      "metadata": { "description": "Replication option for the support log storage account" }
    },

    "applicationDiagnosticsStorageAccountType": {
      "type": "string",
      "allowedValues": [ "Standard_LRS", "Standard_GRS" ],
      "defaultValue": "Standard_LRS",
      "metadata": { "description": "Replication option for the application diagnostics storage account" }
    },

    "vmNodeType0Name": {
      "type": "string",
      "defaultValue": "FrontEnd"
    },
    "vmNodeType0Size": {
      "type": "string",
      "defaultValue": "Standard_D2"
    },
    "vmNodeType0Count": {
      "type": "int",
      "defaultValue": 5
    },
    "vmNodeType1Name": {
      "type": "string",
      "defaultValue": "Worker"
    },
    "vmNodeType1Size": {
      "type": "string",
      "defaultValue": "Standard_D2"
    },
    "vmNodeType1Count": {
      "type": "int",
      "defaultValue": 5
    },
    "certificateThumbprint": {
      "type": "string",
      "defaultValue": "a7af70971c745a05b579130363b52a83e5515f62"
    },
    "certificateStoreValue": {
      "type": "string",
      "defaultValue": "My"
    },
    "sourceVaultvalue": {
      "type": "securestring",
      "defaultValue": ""
    },
    "sourceVaultSecret": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "vmssApiVersion": "2016-03-30",
    "lbApiVersion": "2015-06-15",
    "vNetApiVersion": "2015-06-15",
    "storageApiVersion": "2015-06-15",
    "publicIPApiVersion": "2015-06-15",
    "supportLogStorageAccountName": "[toLower( concat('sflogs', uniqueString(resourceGroup().id),'2'))]",
    "applicationDiagnosticsStorageAccountName": "[toLower(concat(uniqueString(resourceGroup().id), '3' ))]",

    "branch": "develop",
    "folder": "/301-Service-Fabric-Cluster-ERNetwork-Owin/",
    "baseURL": "[concat('https://raw.githubusercontent.com/Microsoft/MSITARM/',variables('branch'),variables('folder'))]",

    "IISDeployzip": "scripts/Deploy-WebServer.ps1.zip",
    "configurationFunction": "Deploy-WebServer.ps1\\DeployWebServer",

    "FEILB": "[concat('FE',parameters('lbName'),'')]",
    "WorkerILB": "[concat('Wrk',parameters('lbName'),'')]",

    "AvailabilitySet": "[concat(parameters('lbName'),'set')]",

    "FEavailabilitySetName": "[concat('',parameters('vmNodeType0Name'),'SS')]",
    "WRKavailabilitySetName": "[concat('',parameters('vmNodeType1Name'),'SS')]",

    "vnetID": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks',parameters('virtualNetwork'))]",
    "subnet0Ref": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",

    "uniqueStringArray0": [
      "[concat('0', parameters('vmStorageAccountName0'))]",
      "[concat('1', parameters('vmStorageAccountName0'))]",
      "[concat('2', parameters('vmStorageAccountName0'))]",
      "[concat('3', parameters('vmStorageAccountName0'))]",
      "[concat('4', parameters('vmStorageAccountName0'))]"
    ],
    "uniqueStringArray1": [
      "[concat('5', parameters('vmStorageAccountName1'))]",
      "[concat('6', parameters('vmStorageAccountName1'))]",
      "[concat('7', parameters('vmStorageAccountName1'))]",
      "[concat('8', parameters('vmStorageAccountName1'))]",
      "[concat('9', parameters('vmStorageAccountName1'))]"
    ],
    "vmExtensionName": "Microsoft.Powershell.DSC",
    "DomainJoinzip": "scripts/DomainJoinSFC.ps1.zip",
    "DomainJoinModule": "[concat(variables('BaseURL'),variables('DomainJoinzip'))]"

  },
  "resources": [
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('uniqueStringArray0')[copyIndex()]]",
      "location": "[resourceGroup().location]",
      "properties": { "accountType": "[parameters('storageAccountType0')]" },
      "copy": {
        "name": "storageLoop0",
        "count": "[parameters('vmNodeType0Count')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('uniqueStringArray1')[copyIndex()]]",
      "location": "[resourceGroup().location]",
      "properties": { "accountType": "[parameters('storageAccountType1')]" },
      "copy": {
        "name": "storageLoop1",
        "count": "[parameters('vmNodeType1Count')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('supportLogStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": { "accountType": "[parameters('supportLogStorageAccountType')]" },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('applicationDiagnosticsStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": { "accountType": "[parameters('applicationDiagnosticsStorageAccountType')]" },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySet')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('FEILB')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "FrontEnd LoadBalancer"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('subnet0Ref')]"
              },

              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "FELoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "FEBackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "FELBRule",
            "properties": {

              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/backendAddressPools/FEBackendPool1')]"
              },
              "backendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('FEILB')), '/frontendIPConfigurations/FELoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/probes/FEFabricGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "FELBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/backendAddressPools/FEBackendPool1')]"
              },
              "backendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/frontendIPConfigurations/FELoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/probes/FEFabricHttpGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "FEAppPortLBRule1",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/backendAddressPools/FEBackendPool1')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort1')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/frontendIPConfigurations/FELoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort1')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/probes/FEAppPortProbe1')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FEFabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FEFabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FEAppPortProbe1",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort1')]",
              "protocol": "tcp"
            }
          }

        ],
        "inboundNatPools": [
          {
            "name": "FELoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/frontendIPConfigurations/FELoadBalancerFrontend')]"
              },
              "frontendPortRangeEnd": "4500",
              "frontendPortRangeStart": "3389",
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('WorkerILB')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Worker LoadBalancer"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('subnet0Ref')]"
              },

              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "WRKLoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "WRKBackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "WRKLBRule",
            "properties": {

              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/backendAddressPools/WRKBackendPool1')]"
              },
              "backendPort": "[parameters('nt1fabricTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/frontendIPConfigurations/WRKLoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('nt1fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/probes/WRKFabricGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "WRKLBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/backendAddressPools/WRKBackendPool1')]"
              },
              "backendPort": "[parameters('nt1fabricHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/frontendIPConfigurations/WRKLoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('nt1fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/probes/WRKFabricHttpGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "WRKAppPortLBRule1",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/backendAddressPools/WRKBackendPool1')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort2')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/frontendIPConfigurations/WRKLoadBalancerFrontend')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort2')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/probes/WRKAppPortProbe1')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "WRKFabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt1fabricTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "WRKFabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt1fabricHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "WRKAppPortProbe1",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort2')]",
              "protocol": "tcp"
            }
          }

        ],
        "inboundNatPools": [
          {
            "name": "WRKLoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/frontendIPConfigurations/WRKLoadBalancerFrontend')]"
              },
              "frontendPortRangeEnd": "4500",
              "frontendPortRangeStart": "3389",
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[concat('FE',parameters('VMScaleSetName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[0])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[1])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[2])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[3])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[4])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('FEILB'))]"
      ],
      "properties": {
        "overprovision": "[parameters('overProvision')]",
        "upgradePolicy": { "mode": "Automatic" },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(parameters('VMScaleSetName'),'_FEServiceFabricNode')]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[parameters('vmNodeType0Name')]",
                    "dataPath": "C:\\\\SvcFab",
                    "durabilityLevel": "Bronze",
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    }

                  },
                  "typeHandlerVersion": "1.0"
                }
              },
              {
                "name": "[concat('VMDiagnosticsVmExt','_vmNodeType0Name')]",
                "properties": {
                  "type": "IaaSDiagnostics",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2015-05-01-preview').key1]",
                    "storageAccountEndPoint": "https://core.windows.net/"
                  },
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "settings": {
                    "WadCfg": {
                      "DiagnosticMonitorConfiguration": {
                        "overallQuotaInMB": "50000",
                        "EtwProviders": {
                          "EtwEventSourceProviderConfiguration": [
                            {
                              "provider": "Microsoft-ServiceFabric-Actors",
                              "scheduledTransferKeywordFilter": "1",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricReliableActorEventTable" }
                            },
                            {
                              "provider": "Microsoft-ServiceFabric-Services",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricReliableServiceEventTable" }
                            }
                          ],
                          "EtwManifestProviderConfiguration": [
                            {
                              "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                              "scheduledTransferLogLevelFilter": "Information",
                              "scheduledTransferKeywordFilter": "4611686018427387904",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricSystemEventTable" }
                            }
                          ]
                        }
                      }
                    },
                    "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]"
                  },
                  "typeHandlerVersion": "1.5"
                }
              },
              {
                "name": "[variables('vmExtensionName')]",
                "properties": {
                  "publisher": "Microsoft.Powershell",
                  "type": "DSC",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "ModulesUrl": "[variables('DomainJoinModule')]",
                    "SasToken": "",
                    "ConfigurationFunction": "DomainJoinSFC.ps1\\DomainJoin",
                    "Properties": {
                      "Domain": "[parameters('DomainName')]",
                      "LocalAccount": {
                        "UserName": "[parameters('localAdminUserName')]",
                        "Password": "PrivateSettingsRef:localPassword"
                      },
                      "DomainAccount": {
                        "UserName": "[parameters('domainJoinUserName')]",
                        "Password": "PrivateSettingsRef:DomainPassword"
                      },
                      "LocalAdmins": "[parameters('localAdmins')]",
                      "SQLAdmins": "",
                      "OU": "[parameters('ouPath')]"
                    }
                  },
                  "protectedSettings": {
                    "Items": {
                      "LocalPassword": "[parameters('localAdminUserName')]",
                      "DomainPassword": "[parameters('domainJoinPassword')]"
                    }

                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat('FE',parameters('nicName'), '-0')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat('FE',parameters('nicName'),'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('FEILB')), '/backendAddressPools/FEBackendPool1')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('FEILB')), '/inboundNatPools/FELoadBalancerBEAddressNatPool')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnet0Ref')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('localadminPassword')]",
            "adminUsername": "[parameters('localAdminUserName')]",
            "windowsConfiguration": {
              "provisionVMAgent": true,
              "enableAutomaticUpdates": true
            },
            "computernamePrefix": "[parameters('VMScaleSetName')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('sourceVaultvalue')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[parameters('certificateStoreValue')]",
                    "certificateUrl": "[parameters('sourceVaultSecret')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('ImagePublisher')]",
              "offer": "[parameters('ImageOffer')]",
              "sku": "[parameters('Sku')]",
              "version": "[parameters('ImageVersion')]"
            },
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray0')[0], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[1], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[2], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[3], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[4], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[parameters('vmNodeType1Size')]",
        "capacity": "[parameters('vmNodeType1Count')]",
        "tier": "Standard"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[concat('wrk',parameters('VMScaleSetName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray1')[0])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray1')[1])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray1')[2])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray1')[3])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray1')[4])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('WorkerILB'))]"
      ],
      "properties": {
        "overprovision": "[parameters('overProvision')]",
        "upgradePolicy": { "mode": "Automatic" },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(parameters('VMScaleSetName'),'_wrkServiceFabricNode')]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[parameters('vmNodeType1Name')]",
                    "dataPath": "C:\\\\SvcFab",
                    "durabilityLevel": "Bronze",
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    }

                  },
                  "typeHandlerVersion": "1.0"
                }
              },
              {
                "name": "[concat('VMDiagnosticsVmExt','_vmNodeType1Name')]",
                "properties": {
                  "type": "IaaSDiagnostics",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2015-05-01-preview').key1]",
                    "storageAccountEndPoint": "https://core.windows.net/"
                  },
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "settings": {
                    "WadCfg": {
                      "DiagnosticMonitorConfiguration": {
                        "overallQuotaInMB": "50000",
                        "EtwProviders": {
                          "EtwEventSourceProviderConfiguration": [
                            {
                              "provider": "Microsoft-ServiceFabric-Actors",
                              "scheduledTransferKeywordFilter": "1",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricReliableActorEventTable" }
                            },
                            {
                              "provider": "Microsoft-ServiceFabric-Services",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricReliableServiceEventTable" }
                            }
                          ],
                          "EtwManifestProviderConfiguration": [
                            {
                              "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                              "scheduledTransferLogLevelFilter": "Information",
                              "scheduledTransferKeywordFilter": "4611686018427387904",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": { "eventDestination": "ServiceFabricSystemEventTable" }
                            }
                          ]
                        }
                      }
                    },
                    "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]"
                  },
                  "typeHandlerVersion": "1.5"
                }
              },
              {
                "name": "[variables('vmExtensionName')]",
                "properties": {
                  "publisher": "Microsoft.Powershell",
                  "type": "DSC",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "ModulesUrl": "[variables('DomainJoinModule')]",
                    "SasToken": "",
                    "ConfigurationFunction": "DomainJoinSFC.ps1\\DomainJoin",
                    "Properties": {
                      "Domain": "[parameters('DomainName')]",
                      "LocalAccount": {
                        "UserName": "[parameters('localAdminUserName')]",
                        "Password": "PrivateSettingsRef:localPassword"
                      },
                      "DomainAccount": {
                        "UserName": "[parameters('domainJoinUserName')]",
                        "Password": "PrivateSettingsRef:DomainPassword"
                      },
                      "LocalAdmins": "[parameters('localAdmins')]",
                      "SQLAdmins": "",
                      "OU": "[parameters('ouPath')]"
                    }
                  },
                  "protectedSettings": {
                    "Items": {
                      "LocalPassword": "[parameters('localAdminUserName')]",
                      "DomainPassword": "[parameters('domainJoinPassword')]"
                    }

                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat('WRK',parameters('nicName'), '-0')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat('WRK',parameters('nicName'),'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/backendAddressPools/WRKBackendPool1')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('WorkerILB')), '/inboundNatPools/WRKLoadBalancerBEAddressNatPool')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnet0Ref')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('localadminPassword')]",
            "adminUsername": "[parameters('localAdminUserName')]",
            "windowsConfiguration": {
              "provisionVMAgent": true,
              "enableAutomaticUpdates": true
            },
            "computernamePrefix": "[concat('WRK',parameters('VMScaleSetName'))]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('sourceVaultvalue')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[parameters('certificateStoreValue')]",
                    "certificateUrl": "[parameters('sourceVaultSecret')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('ImagePublisher')]",
              "offer": "[parameters('ImageOffer')]",
              "sku": "[parameters('Sku')]",
              "version": "[parameters('ImageVersion')]"
            },
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray1')[0], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray1')[1], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray1')[2], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray1')[3], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray1')[4], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[parameters('vmNodeType1Size')]",
        "capacity": "[parameters('vmNodeType1Count')]",
        "tier": "Standard"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('clusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [ "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]" ],
      "properties": {
        "certificate": {
          "thumbprint": "[parameters('certificateThumbprint')]",
          "x509StoreName": "[parameters('certificateStoreValue')]"
        },
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "clusterState": "Default",
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.blob.core.windows.net/')]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "queueEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.queue.core.windows.net/')]",
          "storageAccountName": "[variables('supportLogStorageAccountName')]",
          "tableEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.table.core.windows.net/')]"
        },
        "fabricSettings": [],
        "managementEndpoint": "[concat('https://',parameters('dnsName'),':',parameters('nt0fabricHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "[parameters('vmNodeType0Name')]",
            "applicationPorts": {
              "endPort": "[parameters('nt0applicationEndPort')]",
              "startPort": "[parameters('nt0applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[parameters('nt0fabricTcpGatewayPort')]",
            "durabilityLevel": "Bronze",
            "ephemeralPorts": {
              "endPort": "[parameters('nt0ephemeralEndPort')]",
              "startPort": "[parameters('nt0ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[parameters('nt0fabricHttpGatewayPort')]",
            "isPrimary": true,
            "vmInstanceCount": "[parameters('vmNodeType0Count')]"
          },
          {
            "name": "[parameters('vmNodeType1Name')]",
            "applicationPorts": {
              "endPort": "[parameters('nt1applicationEndPort')]",
              "startPort": "[parameters('nt1applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[parameters('nt1fabricTcpGatewayPort')]",
            "durabilityLevel": "Bronze",
            "ephemeralPorts": {
              "endPort": "[parameters('nt1ephemeralEndPort')]",
              "startPort": "[parameters('nt1ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[parameters('nt1fabricHttpGatewayPort')]",
            "isPrimary": false,
            "vmInstanceCount": "[parameters('vmNodeType1Count')]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "Silver",
        "vmImage": "Windows"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    }
  ],
    "outputs": {
      "clusterProperties": {
        "value": "[reference(parameters('clusterName'))]",
        "type": "object"
      }
    }
  }
